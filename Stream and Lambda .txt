------------------------------------------------------------------QUESTIONS--------------------------------------------------------------------------



Q1) Given a list of integers, find out all the even numbers exist in the list using Stream functions?
Q2) Given a list of integers, find out all the numbers starting with 1 using Stream functions?
Q3) How to find duplicate elements in a given integers list in java using Stream functions?
Q4) Given the list of integers, find the first element of the list using Stream functions?
Q5) Given a list of integers, find the total number of elements present in the list using Stream functions?
Q6) Given a list of integers, find the maximum value element present in it using Stream functions?
Q7) Given a String, find the first non-repeated character in it using Stream functions?
Q8) Given a String, find the first repeated character in it using Stream functions?
Q9) Given a list of integers, sort all the values present in it using Stream functions?
Q8) Given a String, find the first repeated character in it using Stream functions?
Q9) Given a list of integers, sort all the values present in it using Stream functions?
Q10) Given a list of integers, sort all the values present in it in descending order using Stream functions?
Q11) Write a Java 8 program to concatenate two Streams?
Q12 ) Write a Java 8 program to find the number of Strings in a list whose length is greater
than 5?
Q13) Explain StringJoiner Class in Java 8? How can we achieve joining multiple Strings
using StringJoiner Class?
Q14)Find the Word/number got repeated by using Stream api
   input:2,3,34,,5,5,4,3,3,3 
   output:2-1,3-4,34-1,5-2,4-1
15) Write a Java Lambda Expression to Create Thread 
16) How Lambda Expression and Functional Interfaces are Related?
17)Given a list of Strings .sConvert String to uppercase and Join them with coma (,) using Stream api
List=["USA", "Japan", "France", "Germany", "Italy", "U.K.","Canada"]
18)Given a list of Integer find square of all distinct numbers By using stream api
  list=[9, 10, 3, 4, 7, 3, 4]
19)Given a List of Integers find total count, min, max, sum, and the average for numbers by using Stream api
input  :list=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] 
output: count=10, sum=129, min=2, average=12.900000, max=29

20) Given String str="telCo" Toggle it to str=TELcO






------------------------------------------------------------ANSWERS---------------------------------------------------------------------------------------

Q1 Given a list of integers, find out all the even numbers exist in the list using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,32);
            myList.stream()
                  .filter(n -> n%2 == 0)
                  .forEach(System.out::println);
    }
}

Output:
10, 8, 98, 32

----------------------------------------------------------------------------------------------------------------------------------------------------------
Q2 Given a list of integers, find out all the numbers starting with 1 using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,32);
            myList.stream()
                  .map(s -> s + "") // Convert integer to String
                  .filter(s -> s.startsWith("1"))
                  .forEach(System.out::println);
    }
}

Output:
10, 15


----------------------------------------------------------------------------------------------------------------------------------------------------------


Q3 How to find duplicate elements in a given integers list in java using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
            Set<Integer> set = new HashSet();
            myList.stream()
                  .filter(n -> !set.add(n))
                  .forEach(System.out::println);
    }
}

Output:
98, 15


----------------------------------------------------------------------------------------------------------------------------------------------------------

Q4 Given the list of integers, find the first element of the list using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
            myList.stream()
                  .findFirst()
                  .ifPresent(System.out::println);
    }
}

Output:
10

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q5 Given a list of integers, find the total number of elements present in the list using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
            long count =  myList.stream()
                                .count();
            System.out.println(count);                    
    }
}

Output:
9


----------------------------------------------------------------------------------------------------------------------------------------------------------

Q6 Given a list of integers, find the maximum value element present in it using Stream functions?

import java.util.*;
import java.util.stream.*;
public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
            int max =  myList.stream()
                             .max(Integer::compare)
                             .get();
            System.out.println(max);                    
    }
}

Output:
98

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q7 Given a String, find the first non-repeated character in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class JavaHungry {
    public static void main(String args[]) {
            String input = "Java Hungry Blog Alive is Awesome";

            Character result = input.chars() // Stream of String       
                                    .mapToObj(s -> Character.toLowerCase(Character.valueOf((char) s))) // First convert to Character object and then to lowercase         
                                    .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) //Store the chars in map with count 
                                    .entrySet()
                                    .stream()
                                    .filter(entry -> entry.getValue() == 1L)
                                    .map(entry -> entry.getKey())
                                    .findFirst()
                                    .get();
            System.out.println(result);                    
    }
}

Output:
j

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q8 Given a String, find the first repeated character in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class JavaHungry {
    public static void main(String args[]) {
            String input = "Java Hungry Blog Alive is Awesome";

            Character result = input.chars() // Stream of String       
                                    .mapToObj(s -> Character.toLowerCase(Character.valueOf((char) s))) // First convert to Character object and then to lowercase         
                                    .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) //Store the chars in map with count 
                                    .entrySet()
                                    .stream()
                                    .filter(entry -> entry.getValue() > 1L)
                                    .map(entry -> entry.getKey())
                                    .findFirst()
                                    .get();
            System.out.println(result);                    
    }
}

Output:
a


----------------------------------------------------------------------------------------------------------------------------------------------------------

Q9 Given a list of integers, sort all the values present in it using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);

             myList.stream()
                   .sorted()
                   .forEach(System.out::println);
    }
}

Output:
 8
10
15
15
25
32
49
98
98
----------------------------------------------------------------------------------------------------------------------------------------------------------


Q10 Given a list of integers, sort all the values present in it in descending order using Stream functions?

import java.util.*;
import java.util.stream.*;
import java.util.function.Function;

public class JavaHungry {
    public static void main(String args[]) {
            List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);

             myList.stream()
                   .sorted(Collections.reverseOrder())
                   .forEach(System.out::println);
    }
}

Output:
98
98
49
32
25
15
15
10
8

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q11) Write a Java 8 program to concatenate two Streams?

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
public class Java8 {
 public static void main(String[] args) {
	 List<String> list1 = Arrays.asList("Java", "8");
	 List<String> list2 = Arrays.asList("explained", "through", "programs");
	 Stream<String> concatStream = Stream.concat(list1.stream(), list2.stream());

	 // Concatenated the list1 and list2 by converting them into Stream
	 concatStream.forEach(str -> System.out.print(str + " "));

	 // Printed the Concatenated Stream

 }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------

Q12 ) Write a Java 8 program to find the number of Strings in a list whose length is greater
than 5?
import java.util.ArrayList;
import java.util.List;
public class Java8 {
 public static void main(String[] args) {
 List<String> list = new ArrayList<String>();
 list.add("Saket");
 list.add("Saurav");
 list.add("Softwaretestinghelp");
 list.add("Steve");

 // Added elements into the List
 long count = list.stream().filter(str -> str.length() > 5).count();

 /* Converted the list into Stream and filtering out
 the Strings whose length more than 5
 and counted the length
 */
 System.out.println("We have " + count + " strings with length greater than 5"); }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q13) Explain StringJoiner Class in Java 8? How can we achieve joining multiple Strings
using StringJoiner Class?
Answer: In Java 8, a new class was introduced in the package java.util which was known as
StringJoiner. Through this class, we can join multiple strings separated by delimiters along
with providing prefix and suffix to them.
In the below program, we will learn about joining multiple Strings using StringJoiner Class.
Here, we have “,” as the delimiter between two different strings. Then we have joined five
different strings by adding them with the help of the add() method. Finally, printed the
String Joiner.

import java.util.StringJoiner;
public class Java8 {
 public static void main(String[] args) {
 StringJoiner stj = new StringJoiner(",");
 // Separated the elements with a comma in between.

 stj.add("Saket");
 stj.add("John");
 stj.add("Franklin");
 stj.add("Ricky");
 stj.add("Trevor");

 // Added elements into StringJoiner “stj”

 System.out.println(stj);
 }
}

output : Saket,John,Franklin,Ricky,Trevor


----------------------------------------------------------------------------------------------------------------------------------------------------------

Q14)Find the Word/number got repeated by using Stream api


import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Testing {

	public static void main(String[] args) {
		
		List<Integer> list1= Arrays.asList(2,432,467683,12,1,2,3,4,5,65,67,23);
		
		List<String> list2=Arrays.asList("Devraj","Poojaree","Akash","Devraj");
		
	Map<Integer, Long> e =list1.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
		System.out.println(e);
		list2.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).forEach((a,b)->{
			System.out.println(a+"="+b);
		});

	}

}

OutPut: 
{432=1, 65=1, 1=1, 2=2, 67=1, 3=1, 4=1, 467683=1, 5=1, 23=1, 12=1}
Poojaree=1
Devraj=2
Akash=1
----------------------------------------------------------------------------------------------------------------------------------------
list i/p= ["Himanshu", "Devraj12", "rajeesh", "pavan", "sachine"]
Map output= {5=[pavan], 7=[rajeesh, sachine], 8=[Himanshu, Devraj12]}


public class Main {

	public static void main(String[] args) {

		List<String> list = Arrays.asList("Himanshu", "Devraj12", "rajeesh", "pavan", "sachine");

		final Map<Integer, List<String>> lengthToWords = list.stream()
				.collect(Collectors.groupingBy(String::length, TreeMap::new, Collectors.toList()));

		System.out.println(lengthToWords);
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

15) Write a Java Lambda Expression to Create Thread


Runnable withLambda = () -> System.out.println(" Runnable example with lambda exp.");
    Thread thread1 = new Thread(withLambda);
    thread1.start();
----------------------------------------------------------------------------------------------------------------------------------------------------------


17)Convert String to uppercase and Join them with coma

List<String> G7 = Arrays.asList("USA", "Japan", "France", "Germany", "Italy", "U.K.","Canada"); 
String G7Countries = G7.stream() .map(x -> x.toUpperCase()) .collect(Collectors.joining(", "));

----------------------------------------------------------------------------------------------------------------------------------------------------------

18)Given a list of Integer find square of all distinct numbers By using stream api

List<Integer> numbers = Arrays.asList(9, 10, 3, 4, 7, 3, 4); 
List<Integer> distinct = numbers.stream() .map( i -> i*i) .distinct() .collect(Collectors.toList());

----------------------------------------------------------------------------------------------------------------------------------------------------------
19)Given a List of Integers find total count, min, max, sum, and the average for numbers by using Stream api
input  :list=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] 
output: count=10, sum=129, min=2, average=12.900000, max=29

	List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29); 
		IntSummaryStatistics status = primes.stream() .mapToInt((x) -> x) .summaryStatistics();
		System.out.println(status);

---------------------------------------------------------------------------------------------------------------------------------------

20)
String a = "tELco";
		StringBuffer b = new StringBuffer();
		List<Character> li = a.chars().mapToObj(c -> (char) c).collect(Collectors.toList());
		li.stream().forEach(a1 -> {
			if (Character.isLowerCase(a1)) {
				b.append(Character.toUpperCase(a1));
			} else {
				b.append(Character.toLowerCase(a1));
			}
		});
		System.out.println(b);
-----------------------------------------------------------------------------------------------------------------------------------------
public class Filter_1 {

	public static void main(String[] args) {
   List<String> locations = Arrays.asList(new String[]
		   {"Bidar_1234","Bidar","Bangaluru","Chennai","Mumbai"});
   Stream <String> stream= locations.stream();
   
   List<String> result =stream.filter((location)-> location.length()>5).
		   distinct().sorted().collect(Collectors.toList());
   
   System.out.println("............ printing each cities...............");
   result.stream().forEach((city)-> System.out.println(city));
   
   System.out.println("............. printing only first two cities................. ");
   result.stream().limit(2).forEach(System.out::println);
   
   System.out.println("............skepped elements ..............");
   result.stream().skip(2).forEach(System.out::println);
   long i =result.stream().count();
   
   System.out.println("Number of counts : "+ i);
   System.out.println(result);
   System.out.println(locations);
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------
final List<Employee> list = new ArrayList<>(Arrays.asList(new Employee(2, "Devraj"), new Employee(3, "Dev"),
				new Employee(1, "raj"), new Employee(8, "Suresh")));


Map<Object, List<String>> map = list.stream().collect(
				Collectors.groupingBy(e-> e.startsWith(e.getName()), Collectors.mapping(Employee::getName, Collectors.toList())));


OutPut:
{r=[raj], S=[Suresh], D=[Devraj, Dev]}


---------------------------------------------------------------------------------------------------------------------------------------------------

final List<Employee> list = new ArrayList<>(Arrays.asList(new Employee(2, "Devraj"), new Employee(3, "Dev"),
				new Employee(1, "raj"), new Employee(8, "Suresh")));

Map<Character, List<Employee>> m1 = list.stream()
				.collect(Collectors.groupingBy(a -> a.startsWith(a.getName())));


OutPut:
{r=[Employee [id=1, name=raj]], S=[Employee [id=8, name=Suresh]], D=[Employee [id=2, name=Devraj], Employee [id=3, name=Dev]]}

	
------------------------------------------------------------------------------------------------------------- Sorting the collections
public class Student {
	private int age;
	private String name;

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Student(int age, String name) {
		super();
		this.age = age;
		this.name = name;
	}

	@Override
	public String toString() {
		return "Student [age=" + age + ", name=" + name + "]";
	}
	public Student () {}

//	@Override
//	public int compareTo(Student o) {
//		if(age>o.getAge())
//		{
//			return -1;
//		}
//		return 1;
//	}


}



List<Student> list = new ArrayList<Student>(
				Arrays.asList(new Student(23, "Ram"), new Student(22, "SaiRam"), new Student(21, "SitaRam")));
		List<Student> list1 = list.stream().sorted().collect(Collectors.toList());
		list1.forEach(System.out::println);
---------------------------------------------------------------------------------------------------
public class REDUCE_1 {

	public static void main(String[] args) {
		List<Integer> intList= Arrays.asList(5,7,13,9,-1);
		Optional<Integer> result = intList.stream().filter((a)-> a>0).reduce((a,b)->a>b?a:b);
		if(result.isPresent())
		{
			System.out.println("Result : "+result.get());
		}
		

	}
}
-----------------------------------------------------------------------------------------------------------

package com.xyz;

public class Department {

	private int id;

	private String dName;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getdName() {
		return dName;
	}

	public void setdName(String dName) {
		this.dName = dName;
	}

	public Department(int id, String dName) {
		super();
		this.id = id;
		this.dName = dName;
	}

	public Department() {
		super();
	}

	@Override
	public String toString() {
		return "Department [id=" + id + ", dName=" + dName + "]";
	}

	public Character getChar(String str) {
		return str.charAt(0);
	}

}


package com.xyz;

import java.util.List;
import java.util.Objects;

public class Employee1 {
	private int eid;

	private String ename;

	private String address;

	private Double salary;

	private List<Department> departments;

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Double getSalary() {
		return salary;
	}

	public void setSalary(Double salary) {
		this.salary = salary;
	}

	public List<Department> getDepartments() {
		return departments;
	}

	public void setDepartments(List<Department> departments) {
		this.departments = departments;
	}

	public Employee1(int eid, String ename, String address, Double salary, List<Department> departments) {
		super();
		this.eid = eid;
		this.ename = ename;
		this.address = address;
		this.salary = salary;
		this.departments = departments;
	}

	public Employee1() {
		super();
	}

	@Override
	public String toString() {
		return "Employee1 [eid=" + eid + ", ename=" + ename + ", address=" + address + ", salary=" + salary
				+ ", departments=" + departments + "]";
	}

	
}


		List<Department> dList = new ArrayList<>(Arrays.asList(new Department(2, "ECE"), new Department(5, "CSE"),
				new Department(6, "Civil"), new Department(8, "ELE")));
		int arr[] = { 3, 4, 4, 3, 2 };
		List<Integer> li1 = Arrays.stream(arr).mapToObj(a -> a).toList();
		System.out.println(li1);
		String str = "DevrajDevraj";
		List<Character> ce = str.chars().mapToObj(a -> (char) a).collect(Collectors.toList());
		Map<Character, Long> map = ce.stream()
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		System.out.println(map);

		List<Employee1> eList = new ArrayList<>(Arrays.asList(new Employee1(34, "Devraj", "xyz", 3435.345, dList)));

		Map<Object, List<Department>> li = eList.stream().flatMap(a -> a.getDepartments().stream())
				.collect(Collectors.groupingBy(d -> d.getChar(d.getdName())));

		System.out.println(li);


-------------------------------------------------------------------------------------------Map Interface --------------------------------------

Map<String, Integer> map = new HashMap<>();
        map.put("apple", 5);
        map.put("banana", 3);
        map.put("cherry", 7);
        map.put("date", 5);
        Map<Integer, List<String>> groupedMap = map.entrySet().stream()
                .collect(Collectors.groupingBy(Map.Entry::getValue,
                        Collectors.mapping(Map.Entry::getKey, Collectors.toList())));
        System.out.println(groupedMap);

        groupedMap.entrySet().stream()
                .forEach(entry -> System.out.println("Value: " + entry.getKey() + ", Keys: " + entry.getValue()));

output:
{3=[banana], 5=[date, apple], 7=[cherry]}
